00001048 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 09/05/2023 20:22:03

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : PRAFIN23
00000000                             3  * Written by : <nombres completos de los autores>
00000000                             4  * Date       : 19/05/2023
00000000                             5  * Description: Emulador de la HAL9000
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG $1000
00001000= E082 E09B E0B4 E...        8  EMEM:   DC.W $E082,$E09B,$E0B4,$E01D,$2020,$C006,$2031,$C017,$F160
00001012= F170 CE70 3040 E...        9          DC.W $F170,$CE70,$3040,$EFFD,$501E,$4008,$8000,$0001
00001022= 0001 0001 0001 0...       10          DC.W $0001,$0001,$0001,$0001,$0001,$0000,$0000,$0000
00001032= 0000                      11  EIR:    DC.W 0 ;eregistro de instruccion
00001034= 0000                      12  EPC:    DC.W 0 ;econtador de programa
00001036= 0000                      13  ET0:    DC.W 0 ;eregistro T0
00001038= 0000                      14  ET1:    DC.W 0 ;eregistro T1
0000103A= 0000                      15  EX2:    DC.W 0 ;eregistro X2
0000103C= 0000                      16  EX3:    DC.W 0 ;eregistro X3
0000103E= 0000                      17  EX4:    DC.W 0 ;eregistro X4
00001040= 0000                      18  EX5:    DC.W 0 ;eregistro X5
00001042= 0000                      19  EX6:    DC.W 0 ;eregistro X6
00001044= 0000                      20  EX7:    DC.W 0 ;eregistro X7
00001046= 0000                      21  ESR:    DC.W 0 ;eregistro de estado (00000000 00000CNZ)
00001048                            22  
00001048                            23  START:
00001048  4278 1034                 24      CLR.W EPC
0000104C                            25  
0000104C                            26  FETCH:
0000104C                            27      ;--- IFETCH: INICIO FETCH
0000104C                            28          ;*** En esta seccion debeis introducir el codigo necesario para cargar
0000104C                            29          ;*** en el EIR la siguiente instruccion a ejecutar, indicada por el EPC,
0000104C                            30          ;*** y dejar listo el EPC para que apunte a la siguiente instruccion
0000104C                            31      
0000104C                            32              ; ESCRIBID VUESTRO CODIGO AQUI      
0000104C                            33          
0000104C  3038 1034                 34      MOVE.W EPC,D0           ; movemos el contador a D0
00001050  C0FC 0002                 35      MULU.W #2,D0            ; multiplicamos x2 D0
00001054                            36      
00001054  41F8 1000                 37      LEA.L EMEM,A0           ; cogemos la dirección de la memoria
00001058  D0C0                      38      ADD.W D0,A0             ; sumamos D0 (PC) a A0 para tener la dirección de
0000105A                            39                                  ; la instrucción a ejecutar
0000105A                            40      
0000105A  5278 1034                 41      ADD.W #1,EPC            ; sumamos 1 al EPC para ya apuntar a la siguiente
0000105E  31D0 1032                 42      MOVE.W (A0),EIR         ; movemos la instrucción al eregistro
00001062                            43                                  ; de instrucción
00001062                            44      
00001062                            45          
00001062                            46      ;--- FFETCH: FIN FETCH
00001062                            47      
00001062                            48      
00001062                            49      
00001062                            50      ;--- IBRDECOD: INICIO SALTO A DECOD
00001062                            51          ;*** En esta seccion debeis preparar la pila para llamar a la subrutina
00001062                            52          ;*** DECOD, llamar a la subrutina, y vaciar la pila correctamente,
00001062                            53          ;*** almacenando el resultado de la decodificacion en D1
00001062                            54  
00001062                            55              ; ESCRIBID VUESTRO CODIGO AQUI          
00001062                            56  IBREDECOD:
00001062  3F3C 0000                 57      MOVE.W #0,-(A7)         ; preparamos la pila
00001066  3F38 1032                 58      MOVE.W (EIR),-(A7)      ; metemos la instrucción en la pila
0000106A                            59      
0000106A  4EB9 000010D8             60      JSR DECOD               ; saltamos a la subrutina de librería
00001070                            61                                  ; de decodificación
00001070                            62                                  
00001070  544F                      63      ADDQ.W #2,A7            ; sumamos 2 a A7
00001072  321F                      64      MOVE.W (A7)+,D1         ; en D1 tenemos la instrucción a ejecutar
00001074                            65  
00001074                            66          
00001074                            67      ;--- FBRDECOD: FIN SALTO A DECOD
00001074                            68      
00001074                            69      
00001074                            70      
00001074                            71      ;--- IBREXEC: INICIO SALTO A FASE DE EJECUCION
00001074                            72          ;*** Esta seccion se usa para saltar a la fase de ejecucion
00001074                            73          ;*** NO HACE FALTA MODIFICARLA
00001074  C2FC 0006                 74      MULU #6,D1
00001078  2241                      75      MOVEA.L D1,A1
0000107A  4EE9 107E                 76      JMP JMPLIST(A1)
0000107E                            77  JMPLIST:
0000107E  4EF9 000010D8             78      JMP ELOA
00001084  4EF9 000010D8             79      JMP ESTO
0000108A  4EF9 000010D8             80      JMP ELOIP
00001090  4EF9 000010D8             81      JMP ESTIP
00001096  4EF9 000010D8             82      JMP EGOI
0000109C  4EF9 000010D8             83      JMP EGOZ
000010A2  4EF9 000010D8             84      JMP EGON
000010A8  4EF9 000010D8             85      JMP EEXIT
000010AE  4EF9 000010D8             86      JMP ECOPY
000010B4  4EF9 000010D8             87      JMP EADD
000010BA  4EF9 000010D8             88      JMP ESUB
000010C0  4EF9 000010D8             89      JMP EAND
000010C6  4EF9 000010D8             90      JMP ESET
000010CC  4EF9 000010D8             91      JMP EADQ
000010D2  4EF9 000010D8             92      JMP ELSH
000010D8                            93      ;--- FBREXEC: FIN SALTO A FASE DE EJECUCION
000010D8                            94      
000010D8                            95      
000010D8                            96      
000010D8                            97      ;--- IEXEC: INICIO EJECUCION
000010D8                            98          ;*** En esta seccion debeis implementar la ejecucion de cada einstr.
000010D8                            99      
000010D8                           100      ; ESCRIBID EN CADA ETIQUETA LA FASE DE EJECUCION DE CADA INSTRUCCION
000010D8                           101  ELOA:
000010D8                           102  ESTO:
000010D8                           103  ELOIP:
000010D8                           104  ESTIP:
000010D8                           105  EGOI:
000010D8                           106  EGOZ:
000010D8                           107  EGON:
000010D8                           108  EEXIT:
000010D8                           109  ECOPY:
000010D8                           110  EADD:
000010D8                           111  ESUB:
000010D8                           112  EAND:
000010D8                           113  ESET:
000010D8                           114  EADQ:
000010D8                           115  ELSH:
000010D8                           116      ;--- FEXEC: FIN EJECUCION
000010D8                           117      
000010D8                           118      
000010D8                           119  
000010D8                           120      ;--- ISUBR: INICIO SUBRUTINAS
000010D8                           121          ;*** Aqui debeis incluir las subrutinas que necesite vuestra solucion
000010D8                           122          ;*** SALVO DECOD, que va en la siguiente seccion
000010D8                           123  
000010D8                           124              ; ESCRIBID VUESTRO CODIGO AQUI
000010D8                           125          
000010D8                           126      ;--- FSUBR: FIN SUBRUTINAS
000010D8                           127      
000010D8                           128      
000010D8                           129  
000010D8                           130      ;--- IDECOD: INICIO DECOD
000010D8                           131          ;*** Tras la etiqueta DECOD, debeis implementar la subrutina de 
000010D8                           132          ;*** decodificacion, que debera ser de libreria, siguiendo la interfaz
000010D8                           133          ;*** especificada en el enunciado
000010D8                           134  DECOD:
000010D8                           135              ; ESCRIBID VUESTRO CODIGO AQUI
000010D8                           136              
000010D8  3F00                     137      MOVE.W D0,-(A7)         ; guardamos D0 en la pila
000010DA  3F01                     138      MOVE.W D1,-(A7)         ; guardamos D1 en la pila
000010DC  302F 0008                139      MOVE.W 8(A7),D0         ; la instrucción que hemos guardado la pasamos a D0
000010E0                           140  
000010E0  323C 0000                141      MOVE.W #0, D1           ; D1 contiene el id de la instrucción
000010E4  0800 000F                142      BTST.L #15, D0          ; miramos el bit 16º de la instr.
000010E8  6600 0050                143      BNE DECOD_1XXX          ; si no es 0, saltamos a para la instr. 1XXX
000010EC                           144      
000010EC                           145      ;0XXX
000010EC  0800 000E                146      BTST.L #14, D0          ; miramos el bit 15º de la instr.
000010F0  6600 0028                147      BNE DECOD_01XX          ; si no es 0, saltamos a para la instr. 01XX
000010F4                           148  
000010F4                           149          ;00XX
000010F4  0800 000D                150          BTST.L #13, D0      ; miramos el bit 14º de la instr.
000010F8  6600 0010                151          BNE DECOD_001X      ; si no es 0, saltamos a para la instr. 001X
000010FC                           152          
000010FC                           153              ;000X
000010FC  0800 000C                154              BTST.L #12, D0  ; miramos el bit 13º de la instr.
00001100  6600 0098                155              BNE FINAL_AUX   ; si no es 0, saltamos a final aux para sumar 1
00001104  4EF9 0000119C            156              JMP FINAL       ; si es 0, saltamos al final
0000110A                           157              
0000110A                           158            DECOD_001X:
0000110A  5441                     159              ADDQ.W #2, D1   ; sumamos 2 al id de la instr.
0000110C  0800 000C                160              BTST.L #12, D0  ; miramos el bit 13º de la instr.  
00001110  6600 0088                161              BNE FINAL_AUX   ; si no es 0, saltamos a final aux para sumar 1
00001114  4EF9 0000119C            162              JMP FINAL       ; si es 0, saltamos al final
0000111A                           163           
0000111A                           164        DECOD_01XX:
0000111A  5841                     165          ADDQ.W #4, D1       ; sumamos 4 al id de la instr.
0000111C  0800 000D                166          BTST.L #13, D0      ; miramos el bit 14º de la instr.
00001120  6600 0010                167          BNE DECOD_0110      ; si no es 0, saltamos a la única otra 
00001124                           168                              ; posibilidad que es 0110
00001124                           169             ;010X
00001124  0800 000C                170             BTST.L #12, D0   ; miramos el bit 13º de la instr.
00001128  6600 0070                171             BNE FINAL_AUX    ; si no es 0, saltamos a final aux para sumar 1
0000112C  4EF9 0000119C            172             JMP FINAL        ; si es 0, saltamos directamente al final
00001132                           173        
00001132                           174        DECOD_0110:
00001132  5C41                     175          ADDQ.W #6, D1       ; sumamos 6 directamente porque solo hay 1 instr.
00001134  4EF9 0000119C            176          JMP FINAL           ; que empiece por 011
0000113A                           177          
0000113A                           178    DECOD_1XXX:
0000113A  5E41                     179      ADDQ.W #7, D1           ; id = 7
0000113C  0800 000E                180      BTST.L #14, D0          ; miramos el bit 15º de la instr.
00001140  6600 0008                181      BNE DECOD_11XXX         ; si no es 0, saltamos a la instr. 10XXX
00001144  4EF9 0000119C            182      JMP FINAL               ; como la única instr. con 10 sumamos el id
0000114A                           183                              ; y saltamos directamente al final
0000114A                           184          
0000114A                           185        
0000114A                           186    DECOD_11XXX:
0000114A  0800 000D                187      BTST.L #13, D0          ; miramos el bit 14º 
0000114E  6600 002A                188      BNE DECOD_111XX         ; si no es 0, saltamos a 111XX
00001152                           189      
00001152                           190          ;110XX
00001152  0800 000C                191          BTST.L #12, D0      ; miramos el bit 13º
00001156  6600 0012                192          BNE DECOD_1101X
0000115A                           193          
0000115A                           194              ;1100X
0000115A  5241                     195              ADDQ.W #1, D1   ; id = 8
0000115C  0800 000B                196              BTST.L #11, D0  ; miramos el bit 12º 
00001160  6600 0038                197              BNE FINAL_AUX   ; si es 1, saltamos al final aux para sumar 1
00001164  4EF9 0000119C            198              JMP FINAL       ; si es 0, saltamos directamente al final
0000116A                           199  
0000116A                           200  
0000116A                           201             DECOD_1101X:
0000116A  5641                     202              ADDQ.W #3, D1   ; id = 10
0000116C  0800 000B                203              BTST.L #11, D0  ; miramos el bit 12º
00001170  6600 0028                204              BNE FINAL_AUX   ; si es 1, saltamos al final aux para sumar 1
00001174  4EF9 0000119C            205              JMP FINAL       ; si es 0, saltamos directamente al final
0000117A                           206        
0000117A                           207        DECOD_111XX:
0000117A  5A41                     208          ADDQ.W #5, D1       ; id = 12
0000117C  0800 000C                209          BTST.L #12, D0      ; miramos el bit 13º
00001180  6600 0010                210          BNE DECOD_11110     ; si es 1, saltamos a 11110
00001184                           211          
00001184                           212              ;11100
00001184  0800 000B                213              BTST.L #11, D0  ; miramos el bit 12º
00001188  6600 0010                214              BNE FINAL_AUX   ; si es 1, sumamos 1 al id
0000118C  4EF9 0000119C            215              JMP FINAL       ; si es 0, saltamos al final
00001192                           216              
00001192                           217            DECOD_11110:
00001192  5441                     218              ADDQ.W #2, D1   ; id = 14
00001194  4EF9 0000119C            219              JMP FINAL
0000119A                           220  
0000119A                           221     FINAL_AUX:
0000119A  5241                     222      ADDQ.W #1,D1            ; sumamos 1 al id
0000119C                           223      
0000119C                           224     FINAL: 
0000119C  3F41 000A                225      MOVE.W D1,10(A7)        ; guardamos el id en la pila
000011A0  321F                     226      MOVE.W (A7)+,D1         ; sacamos D1 de la pila
000011A2  301F                     227      MOVE.W (A7)+,D0         ; sacamos D0 de la pila
000011A4                           228      
000011A4  4E75                     229      RTS
000011A6                           230  
000011A6                           231  
000011A6                           232      ;--- FDECOD: FIN DECOD
000011A6                           233      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DECOD               10D8
DECOD_001X          110A
DECOD_0110          1132
DECOD_01XX          111A
DECOD_1101X         116A
DECOD_11110         1192
DECOD_111XX         117A
DECOD_11XXX         114A
DECOD_1XXX          113A
EADD                10D8
EADQ                10D8
EAND                10D8
ECOPY               10D8
EEXIT               10D8
EGOI                10D8
EGON                10D8
EGOZ                10D8
EIR                 1032
ELOA                10D8
ELOIP               10D8
ELSH                10D8
EMEM                1000
EPC                 1034
ESET                10D8
ESR                 1046
ESTIP               10D8
ESTO                10D8
ESUB                10D8
ET0                 1036
ET1                 1038
EX2                 103A
EX3                 103C
EX4                 103E
EX5                 1040
EX6                 1042
EX7                 1044
FETCH               104C
FINAL               119C
FINAL_AUX           119A
IBREDECOD           1062
JMPLIST             107E
START               1048
